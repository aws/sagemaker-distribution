name: Build New Image Version
run-name: Release type - ${{ inputs.release-type }}, Base version - ${{ inputs.base-version }}
on:
  # Manually call
  workflow_dispatch:
    inputs:
      release-type:
        required: true
        type: choice
        description: Type of release
        options:
          - patch
          - minor
          - major
      base-version:
        required: true
        description: Base version=
  # Call from other workflow
  workflow_call:
    inputs:
      release-type:
        type: string
        required: true
      base-version:
        type: string
        required: true
defaults:
  run:
    shell: bash -l {0}
jobs:
  open-pr:
    name: Open Pull Request
    runs-on: ubuntu-latest
    if: github.repository == 'aws/sagemaker-distribution'
    permissions:
      pull-requests: write
      contents: write
    outputs:
      pr_id: ${{ steps.get_pr_id.outputs.pr_id }}
      target_version: ${{ steps.calc_target.outputs.target_version }}
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0
      - uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: ./environment.lock
          environment-name: sagemaker-distribution
          init-shell: bash
      - name: Free up disk space
        run: rm -rf /opt/hostedtoolcache
      - name: Activate sagemaker-distribution
        run: micromamba activate sagemaker-distribution
      - name: Calculate target version
        id: calc_target
        run: |
          TARGET_VERSION=$(python -c 'import semver; print(semver.bump_${{ inputs.release-type }}("${{ inputs.base-version }}"))')
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
      - name: Create or merge release branch
        # Note - CodeBuild depends on this branch name. Don't change without corresponding backend change.
        id: check_branch
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          if git ls-remote --exit-code --heads origin release-${{ steps.calc_target.outputs.target_version }}; then
            echo "Branch exists, merging latest changes in"
            git checkout release-${{ steps.calc_target.outputs.target_version }}
            git merge main
            git push
          else
            echo "Branch doesn't exist, creating now..."
            git checkout -b release-${{ steps.calc_target.outputs.target_version }}
          fi
      - name: Generate artifacts
        run: python ./src/main.py create-${{ inputs.release-type }}-version-artifacts --base-patch-version ${{ inputs.base-version }} --force
      - name: Commit .in artifacts to branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Generate the artifacts every time, only push if there are changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ./build_artifacts
          git diff-index --quiet HEAD || git commit -m 'chore: Generate build artifacts for ${{ steps.calc_target.outputs.target_version }} release'
          git push --set-upstream origin release-${{ steps.calc_target.outputs.target_version }}
      - name: Create or fetch release PR
        id: get_pr_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Create PR if it doesn't exist; fetch existing PR number if it does
        run: |
          if gh pr list --head release-${{ steps.calc_target.outputs.target_version }} --state open --json number | grep -q '"number":'; then
            echo "PR exists already, just fetching ID"
            PR_ID=$(gh pr view release-${{ steps.calc_target.outputs.target_version }} --json number | jq -r .number)
            echo "pr_id=$PR_ID" >> $GITHUB_OUTPUT
          else
            echo "PR doesn't exist, creating now..."
            git push --set-upstream origin release-${{ steps.calc_target.outputs.target_version }}
            URL=$(gh pr create -H release-${{ steps.calc_target.outputs.target_version }} -B main \
                  --title 'release: v${{ steps.calc_target.outputs.target_version }}' -F ./.github/workflows/PR_TEMPLATE.md)
            PR_ID=$(echo $URL | sed 's:.*/::')
            echo "pr_id=$PR_ID" >> $GITHUB_OUTPUT
          fi
  call-codebuild-project:
    runs-on: ubuntu-latest
    needs: open-pr
    permissions:
      pull-requests: write
      contents: write
      id-token: write
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.START_CODEBUILD_ROLE }}
          aws-region: us-east-1
          # CodeBuild timeout of 8 hours
          role-duration-seconds: 28800
          audience: https://sts.us-east-1.amazonaws.com
      - name: Run CodeBuild
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: ${{ secrets.CODEBUILD_JOB_NAME }}
          image-override: "aws/codebuild/standard:7.0"
          image-pull-credentials-type-override: "CODEBUILD"
          source-version-override: "pr/${{ needs.open-pr.outputs.pr_id }}"
